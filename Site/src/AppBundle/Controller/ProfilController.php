<?php

namespace AppBundle\Controller;

use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use AppBundle\Entity\Users;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use AppBundle\Form\ProfilEditType;
use AppBundle\Form\ProfilEditHostType;

class ProfilController extends Controller
{
    /**
     * @Route("/profil", name="profil")
     */
    public function profil()
    {
        $user = $this->getUser();
        $articles = $user->getArticle();
        $jobs = $user->getJob();

        return $this->render('profil/index.html.twig', [
            'user' => $user,
            'articles' => $articles,
            'jobs' => $jobs,
        ]);
    }

    /**
     * @Route("/profil/edit_backpacker", name="profil_edit")
     */
    public function ProfilEditAction(Request $request, UserPasswordEncoderInterface $encoder)
    {
        $userConnected = $this->getUser();
        $entityManager = $this->getDoctrine()->getManager();
        $user = $entityManager->getRepository(Users::class)->find($userConnected->getId());
        $form = $this->createForm(ProfilEditType::class, $user);
        $form->handleRequest($request);
        if ($form->isSubmitted()) {
            dump($form->getData());
        }
        if ($form->isSubmitted() && $form->isValid()) {
            /** @var Users $editUser */
            $editUser = $form->getData();
            $plainpw = $editUser->getPlainPassword();
            $encode = $encoder->encodePassword($editUser, $plainpw);
            $editUser->setPassword($encode);

            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file =$user->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('user_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $user->setImage($fileName);

            $em = $this->getDoctrine()->getManager();
            $em->persist($editUser);
            $em->flush();
            return $this->redirectToRoute('profil');
        }
        return $this->render('profil/edit_backpacker.html.twig', ['form'=>$form->createView()]);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


}
